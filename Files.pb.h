// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Files.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Files_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Files_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Files_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Files_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Files_2eproto;
namespace fileData {
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class Line;
struct LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class myFiles;
struct myFilesDefaultTypeInternal;
extern myFilesDefaultTypeInternal _myFiles_default_instance_;
}  // namespace fileData
PROTOBUF_NAMESPACE_OPEN
template<> ::fileData::File* Arena::CreateMaybeMessage<::fileData::File>(Arena*);
template<> ::fileData::Line* Arena::CreateMaybeMessage<::fileData::Line>(Arena*);
template<> ::fileData::myFiles* Arena::CreateMaybeMessage<::fileData::myFiles>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fileData {

// ===================================================================

class Line final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fileData.Line) */ {
 public:
  inline Line() : Line(nullptr) {}
  ~Line() override;
  explicit PROTOBUF_CONSTEXPR Line(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Line(const Line& from);
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Line& default_instance() {
    return *internal_default_instance();
  }
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Line* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Line& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Line& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fileData.Line";
  }
  protected:
  explicit Line(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
  };
  // optional string line = 1;
  bool has_line() const;
  private:
  bool _internal_has_line() const;
  public:
  void clear_line();
  const std::string& line() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_line(ArgT0&& arg0, ArgT... args);
  std::string* mutable_line();
  PROTOBUF_NODISCARD std::string* release_line();
  void set_allocated_line(std::string* line);
  private:
  const std::string& _internal_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_line(const std::string& value);
  std::string* _internal_mutable_line();
  public:

  // @@protoc_insertion_point(class_scope:fileData.Line)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_;
  friend struct ::TableStruct_Files_2eproto;
};
// -------------------------------------------------------------------

class File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fileData.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit PROTOBUF_CONSTEXPR File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const File& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fileData.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTimeFieldNumber = 4,
    kVersionNumberFieldNumber = 1,
    kOperationCountFieldNumber = 3,
  };
  // repeated .fileData.Line data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::fileData::Line* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileData::Line >*
      mutable_data();
  private:
  const ::fileData::Line& _internal_data(int index) const;
  ::fileData::Line* _internal_add_data();
  public:
  const ::fileData::Line& data(int index) const;
  ::fileData::Line* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileData::Line >&
      data() const;

  // optional string time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const std::string& time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time();
  PROTOBUF_NODISCARD std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // optional int32 versionNumber = 1;
  bool has_versionnumber() const;
  private:
  bool _internal_has_versionnumber() const;
  public:
  void clear_versionnumber();
  int32_t versionnumber() const;
  void set_versionnumber(int32_t value);
  private:
  int32_t _internal_versionnumber() const;
  void _internal_set_versionnumber(int32_t value);
  public:

  // optional int32 operationCount = 3;
  bool has_operationcount() const;
  private:
  bool _internal_has_operationcount() const;
  public:
  void clear_operationcount();
  int32_t operationcount() const;
  void set_operationcount(int32_t value);
  private:
  int32_t _internal_operationcount() const;
  void _internal_set_operationcount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fileData.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileData::Line > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  int32_t versionnumber_;
  int32_t operationcount_;
  friend struct ::TableStruct_Files_2eproto;
};
// -------------------------------------------------------------------

class myFiles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fileData.myFiles) */ {
 public:
  inline myFiles() : myFiles(nullptr) {}
  ~myFiles() override;
  explicit PROTOBUF_CONSTEXPR myFiles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  myFiles(const myFiles& from);
  myFiles(myFiles&& from) noexcept
    : myFiles() {
    *this = ::std::move(from);
  }

  inline myFiles& operator=(const myFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline myFiles& operator=(myFiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const myFiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const myFiles* internal_default_instance() {
    return reinterpret_cast<const myFiles*>(
               &_myFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(myFiles& a, myFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(myFiles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(myFiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  myFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<myFiles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const myFiles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const myFiles& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(myFiles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fileData.myFiles";
  }
  protected:
  explicit myFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
  };
  // repeated .fileData.File files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::fileData::File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileData::File >*
      mutable_files();
  private:
  const ::fileData::File& _internal_files(int index) const;
  ::fileData::File* _internal_add_files();
  public:
  const ::fileData::File& files(int index) const;
  ::fileData::File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileData::File >&
      files() const;

  // @@protoc_insertion_point(class_scope:fileData.myFiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileData::File > files_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Files_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Line

// optional string line = 1;
inline bool Line::_internal_has_line() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Line::has_line() const {
  return _internal_has_line();
}
inline void Line::clear_line() {
  line_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Line::line() const {
  // @@protoc_insertion_point(field_get:fileData.Line.line)
  return _internal_line();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Line::set_line(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 line_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fileData.Line.line)
}
inline std::string* Line::mutable_line() {
  std::string* _s = _internal_mutable_line();
  // @@protoc_insertion_point(field_mutable:fileData.Line.line)
  return _s;
}
inline const std::string& Line::_internal_line() const {
  return line_.Get();
}
inline void Line::_internal_set_line(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  line_.Set(value, GetArenaForAllocation());
}
inline std::string* Line::_internal_mutable_line() {
  _has_bits_[0] |= 0x00000001u;
  return line_.Mutable(GetArenaForAllocation());
}
inline std::string* Line::release_line() {
  // @@protoc_insertion_point(field_release:fileData.Line.line)
  if (!_internal_has_line()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = line_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (line_.IsDefault()) {
    line_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Line::set_allocated_line(std::string* line) {
  if (line != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  line_.SetAllocated(line, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (line_.IsDefault()) {
    line_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fileData.Line.line)
}

// -------------------------------------------------------------------

// File

// optional int32 versionNumber = 1;
inline bool File::_internal_has_versionnumber() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool File::has_versionnumber() const {
  return _internal_has_versionnumber();
}
inline void File::clear_versionnumber() {
  versionnumber_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t File::_internal_versionnumber() const {
  return versionnumber_;
}
inline int32_t File::versionnumber() const {
  // @@protoc_insertion_point(field_get:fileData.File.versionNumber)
  return _internal_versionnumber();
}
inline void File::_internal_set_versionnumber(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  versionnumber_ = value;
}
inline void File::set_versionnumber(int32_t value) {
  _internal_set_versionnumber(value);
  // @@protoc_insertion_point(field_set:fileData.File.versionNumber)
}

// optional string time = 4;
inline bool File::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool File::has_time() const {
  return _internal_has_time();
}
inline void File::clear_time() {
  time_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& File::time() const {
  // @@protoc_insertion_point(field_get:fileData.File.time)
  return _internal_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_time(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fileData.File.time)
}
inline std::string* File::mutable_time() {
  std::string* _s = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:fileData.File.time)
  return _s;
}
inline const std::string& File::_internal_time() const {
  return time_.Get();
}
inline void File::_internal_set_time(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  time_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000001u;
  return time_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_time() {
  // @@protoc_insertion_point(field_release:fileData.File.time)
  if (!_internal_has_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = time_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (time_.IsDefault()) {
    time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void File::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_.SetAllocated(time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (time_.IsDefault()) {
    time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fileData.File.time)
}

// repeated .fileData.Line data = 2;
inline int File::_internal_data_size() const {
  return data_.size();
}
inline int File::data_size() const {
  return _internal_data_size();
}
inline void File::clear_data() {
  data_.Clear();
}
inline ::fileData::Line* File::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:fileData.File.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileData::Line >*
File::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fileData.File.data)
  return &data_;
}
inline const ::fileData::Line& File::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::fileData::Line& File::data(int index) const {
  // @@protoc_insertion_point(field_get:fileData.File.data)
  return _internal_data(index);
}
inline ::fileData::Line* File::_internal_add_data() {
  return data_.Add();
}
inline ::fileData::Line* File::add_data() {
  ::fileData::Line* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:fileData.File.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileData::Line >&
File::data() const {
  // @@protoc_insertion_point(field_list:fileData.File.data)
  return data_;
}

// optional int32 operationCount = 3;
inline bool File::_internal_has_operationcount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool File::has_operationcount() const {
  return _internal_has_operationcount();
}
inline void File::clear_operationcount() {
  operationcount_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t File::_internal_operationcount() const {
  return operationcount_;
}
inline int32_t File::operationcount() const {
  // @@protoc_insertion_point(field_get:fileData.File.operationCount)
  return _internal_operationcount();
}
inline void File::_internal_set_operationcount(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  operationcount_ = value;
}
inline void File::set_operationcount(int32_t value) {
  _internal_set_operationcount(value);
  // @@protoc_insertion_point(field_set:fileData.File.operationCount)
}

// -------------------------------------------------------------------

// myFiles

// repeated .fileData.File files = 1;
inline int myFiles::_internal_files_size() const {
  return files_.size();
}
inline int myFiles::files_size() const {
  return _internal_files_size();
}
inline void myFiles::clear_files() {
  files_.Clear();
}
inline ::fileData::File* myFiles::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:fileData.myFiles.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileData::File >*
myFiles::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:fileData.myFiles.files)
  return &files_;
}
inline const ::fileData::File& myFiles::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::fileData::File& myFiles::files(int index) const {
  // @@protoc_insertion_point(field_get:fileData.myFiles.files)
  return _internal_files(index);
}
inline ::fileData::File* myFiles::_internal_add_files() {
  return files_.Add();
}
inline ::fileData::File* myFiles::add_files() {
  ::fileData::File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:fileData.myFiles.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fileData::File >&
myFiles::files() const {
  // @@protoc_insertion_point(field_list:fileData.myFiles.files)
  return files_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fileData

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Files_2eproto
